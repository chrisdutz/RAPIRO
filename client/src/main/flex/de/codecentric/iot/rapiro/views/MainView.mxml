<?xml version="1.0"?>
<!--
  Created by christoferdutz on 19.05.15.
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        title="{resourceManager.getString('rapiro', 'main.title')}"
        creationComplete="onCreationComplete(event)">

    <fx:Metadata>
        [ResourceBundle("rapiro")]
    </fx:Metadata>

    <fx:Declarations>
        <s:ChannelSet id="channelSet">
            <s:StreamingAMFChannel id="streamingChannel"
                                   connectTimeout="5"
                                   url="http://localhost:8080/messagebroker/websocket-amf"/>
            <s:AMFChannel id="longPollingChannel"
                          pollingEnabled="true"
                          piggybackingEnabled="true"
                          pollingInterval="1000"
                          url="http://localhost:8080/messagebroker/long-polling-amf"/>
            <s:AMFChannel id="shortPollingChannel"
                          pollingEnabled="true"
                          piggybackingEnabled="true"
                          pollingInterval="1000"
                          url="http://localhost:8080/messagebroker/short-polling-amf"/>
        </s:ChannelSet>
        <s:RemoteObject id="movementService"
                        destination="movementService"
                        channelSet="{channelSet}"
                        fault="onFault(event)">
            <s:method name="stop" result="onResult(event)"/>
            <s:method name="moveForward" result="onResult(event)"/>
            <s:method name="moveLeft" result="onResult(event)"/>
            <s:method name="moveRight" result="onResult(event)"/>
            <s:method name="moveBack" result="onResult(event)"/>
        </s:RemoteObject>
        <s:RemoteObject id="voiceService"
                        destination="voiceService"
                        channelSet="{channelSet}"
                        fault="onFault(event)">
            <s:method name="startSinging" result="onResult(event)"/>
            <s:method name="stopSinging" result="onResult(event)"/>
        </s:RemoteObject>
        <s:Consumer id="visionEvents"
                    destination="visionEvents"
                    channelSet="{channelSet}"
                    fault="onMessageFault(event)"
                    message="onVisionEvent(event)"/>
    </fx:Declarations>

    <fx:Script>
        <![CDATA[
        import de.codecentric.iot.rapiro.vision.model.Block;
        import de.codecentric.iot.rapiro.vision.model.ColorBlock;

        import mx.collections.ArrayCollection;

        import mx.events.FlexEvent;
        import mx.messaging.events.MessageEvent;
        import mx.messaging.events.MessageFaultEvent;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        public static const baseUrl:String = CONFIG::baseUrl;

        protected function onCreationComplete(event:FlexEvent):void {
            visionEvents.subscribe();
        }

        protected function onResult(event:ResultEvent):void {
            trace("Result: " + event);
        }

        protected function onFault(event:FaultEvent):void {
            trace("Fault: " + event);
        }

        protected function onMessageFault(event:MessageFaultEvent):void {
            trace("Fault: " + event);
        }

        protected function onForwardClick(event:MouseEvent):void {
            movementService.moveForward();
        }

        protected function onLeftClick(event:MouseEvent):void {
            movementService.moveLeft();
        }

        protected function onRightClick(event:MouseEvent):void {
            movementService.moveRight();
        }

        protected function onBackClick(event:MouseEvent):void {
            movementService.moveBack();
        }

        protected function onStopClick(event:MouseEvent):void {
            movementService.stop();
        }

        protected function onStartSingingClick(event:MouseEvent):void {
            voiceService.startSinging();
        }

        protected function onStopSingingClick(event:MouseEvent):void {
            voiceService.stopSinging();
        }

        protected function onVisionEvent(event:MessageEvent):void {
            if(event.message.body is ArrayCollection) {
                var blocks:ArrayCollection = ArrayCollection(event.message.body);
                trace("Got Blocks: " + blocks.length);
                for each(var block:Block in blocks) {
                    trace(" - Block: " + block);
                }
            } else {
                trace("Other: " + event);
            }
        }

        ]]>
    </fx:Script>

    <s:VGroup width="100%" height="100%" horizontalAlign="center" padding="40">
        <s:VGroup width="100%" height="100%" horizontalAlign="center" padding="20">
            <s:Button click="onForwardClick(event)" label="Forward"/>
            <s:HGroup>
                <s:Button click="onLeftClick(event)" label="Left"/>
                <s:Button click="onStopClick(event)" label="Stop"/>
                <s:Button click="onRightClick(event)" label="Right"/>
            </s:HGroup>
            <s:Button click="onBackClick(event)" label="Back"/>
        </s:VGroup>

        <s:VGroup width="100%">
            <s:Button click="onStartSingingClick(event)" label="Start Singing"/>
            <s:Button click="onStopSingingClick(event)" label="Stop Singing"/>
        </s:VGroup>
    </s:VGroup>

</s:View>
